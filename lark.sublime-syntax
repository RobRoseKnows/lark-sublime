%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - lark
scope: source.lark

variables:
  rule_format: '_?[a-z][_a-z0-9]*'
  token_format: '_?[A-Z][_A-Z0-9]*'
  illegal_format: '(?=[A-Z_]*[a-z])(?=[a-z_]*[A-Z])[a-zA-Z_]+'
  start_name: 'start'
  regex_format: '\/(?!\/)(\\\/|\\\\|[^\/\n])*?\/[imslux]*'
  new_line: '(\r?\n)+\s*'
  operator_def: '\:'
  operator_or: '\|'
  operator_qmrk: '\?'
  operator_star: '\*'
  operator_plus: '\+'
  operator_arrow: '\-\>'
  operator_ddot: '\.\.'
  operator_bang: '\!'
  operator_any: |-
    (?:
      {{operator_def}}|
      {{operator_or}}|
      {{operator_qmrk}}|
      {{operator_star}}|
      {{operator_plus}}|
      {{operator_arrow}}|
      {{operator_ddot}}|
      {{operator_bang}}
    )


contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: definition
    - include: keywords
    - include: constants

  definition:
    - match: '^({{start_name}})\s*({{operator_def}})'
      captures:
        1: entity.name.function.constructor.lark
        2: keyword.operator.assignment.lark
      push: rule_body
    - match: ^({{operator_bang}})?({{operator_qmrk}}|)?({{rule_format}})\s*({{operator_def}})'
      captures:
        1: keyword.operator.lark
        2: keyword.operator.lark
        3: entity.name.function.lark
        4: keyword.operator.assignment.lark
      push: rule_body
    - match: '^({{token_format}})\s*({{operator_def}})'
      captures:
        1: entity.name.constant.lark
        2: keyword.operator.assignment.lark
      push: terminal_body
    - match: '^({{illegal_format}})\s*({{operator_def}})'
        1: invalid.lark
        2: keyword.operator.assignment.lark



  rule_body:
    - match: '\b({{def_rule_format}})([{{operator_qmrk}}{{operator_plus}}{{operator_star}}]?)'
      captures:
        1: entity.name.function.lark
        2: keyword.operator.lark
    - match: '\b({{def_terminal_format}})([{{operator_qmrk}}{{operator_plus}}{{operator_star}}]?)'
      captures:
        1: entity.name.constant.lark
        2: keyword.operator.lark

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while)\b'
      scope: keyword.control.lark

  constants:
    - include: numbers
    - include: strings

  numbers:
    - match: '\b\d+\b'
      scope: constant.numeric.integer.lark
    - match: '\b-?\d+(\.\d+)?([eE][+-]?\d+)?\b'
      scope: constant.numeric.float.lark

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.lark
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.lark
    - match: '\\.'
      scope: constant.character.escape.lark
    - match: '"'
      scope: punctuation.definition.string.end.lark
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.lark
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.lark
        - match: $\n?
          pop: true
    # - match: '#'
    #   scope: punctuation.definition.comment.lark
    #   push:
    #     # This is an anonymous context push for brevity.
    #     - meta_scope: comment.line.lark
    #     - match: $\n?
    #       pop: true