%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - lark
scope: source.lark

variables:
  def_rule_format: '[a-z_]+'
  def_terminal_format: '[A-Z_]+'
  def_illegal_format: '(?=[A-Z_]*[a-z])(?=[a-z_]*[A-Z])[a-zA-Z_]+'
  def_start_name: 'start'
  operator_def: ':'
  operator_or: '|'


contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: definition
    - include: keywords
    - include: numbers
    - include: strings

  definition:
    - match: '^({{def_start_name}})\s*({{operator_def}})'
      captures:
        1: entity.name.function.constructor.lark
        2: keyword.operator.assignment.lark
      push: rule_body
    - match: '^({{def_rule_format}})\s*({{operator_def}})'
      captures:
        1: entity.name.function.lark
        2: keyword.operator.assignment.lark
      push: rule_body
    - match: '^({{def_terminal_format}})\s*({{operator_def}})'
      captures:
        1: entity.name.constant.lark
        2: keyword.operator.assignment.lark
      push: terminal_body
    - match: '^({{def_illegal_format}})\s*({{operator_def}})'
        1: invalid.lark
        2: keyword.operator.assignment.lark



  rule_body:
    - match:






  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while)\b'
      scope: keyword.control.lark

  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.lark

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.lark
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.lark
    - match: '\.'
      scope: constant.character.escape.lark
    - match: '"'
      scope: punctuation.definition.string.end.lark
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.lark
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.lark
        - match: $\n?
          pop: true
